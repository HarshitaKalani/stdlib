/**
* @license Apache-2.0
*
* Copyright (c) 2023 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;
var format = require( '@stdlib/string/format' );


// MAIN //

/**
* Replaces the substring after the first occurrence of a specified search string.
*
* @param {string} str - input string
* @param {string} replacement - replacement string
* @param {string} search - search string
* @param {integer} [fromIndex=0] - index at which to start the search
* @throws {TypeError} first argument must be a string
* @throws {TypeError} second argument must be a string
* @throws {TypeError} third argument must be a string
* @throws {TypeError} fourth argument must be an integer
* @returns {string} substring
*
* @example
* var out = replaceAfter( 'Hello, world!', 'foo', ', ' );
* // returns 'Hello, foo'
*
* @example
* var out = replaceAfter( 'beep boop', 'foo', 'beep' );
* // returns 'beepfoo'
*
* @example
* var out = replaceAfter( 'beep boop', 'foo', 'boop' );
* // returns 'beep boopfoo'
*
* @example
* var out = replaceAfter( 'beep boop', 'foo', 'xyz' );
* // returns ''
*
* @example
* var out = replaceAfter( 'beep boop', 'foo', 'beep', 5 );
* // returns ''
*
* @example
* var out = replaceAfter( 'beep boop beep baz', 'foo', 'beep', 5 );
* // returns 'beep boop beepfoo'
*/
function replaceAfter( str, replacement, search, fromIndex ) {
	var idx;
	if ( !isString( str ) ) {
		throw new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', str ) );
	}
	if ( !isString( replacement ) ) {
		throw new TypeError( format( 'invalid argument. Second argument must be a string. Value: `%s`.', replacement ) );
	}
	if ( !isString( search ) ) {
		throw new TypeError( format( 'invalid argument. Third argument must be a string. Value: `%s`.', search ) );
	}
	if ( arguments.length > 3 ) {
		if ( !isInteger( fromIndex ) ) {
			throw new TypeError( format( 'invalid argument. Fourth argument must be an integer. Value: `%s`.', fromIndex ) );
		}
		idx = str.indexOf( search, fromIndex );
	} else {
		idx = str.indexOf( search );
	}
	if ( idx === -1 ) {
		return '';
	}
	if ( str === '' ) {
		return str;
	}
	return str.substring( 0, idx+search.length ) + replacement;
}


// EXPORTS //

module.exports = replaceAfter;
